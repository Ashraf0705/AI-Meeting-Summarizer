// server/index.js
const express = require('express');
const cors = require('cors');
const Groq = require('groq-sdk');
const { Resend } = require('resend'); // Import Resend
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3001;

// Initialize clients
const groq = new Groq({ apiKey: process.env.GROQ_API_KEY });
const resend = new Resend(process.env.RESEND_API_KEY); // Initialize Resend

// Middleware
app.use(cors());
app.use(express.json());

// --- API Endpoints ---

// Summarization Endpoint (Unchanged)
app.post('/api/summarize', async (req, res) => {
    const { transcript, prompt } = req.body;
    if (!transcript || !prompt) {
        return res.status(400).json({ error: 'Request body must contain both transcript and prompt.' });
    }
    try {
        const chatCompletion = await groq.chat.completions.create({
            messages: [
                { role: 'system', content: 'You are a world-class AI assistant, designed to summarize complex meeting transcripts with precision and clarity according to user instructions.' },
                { role: 'user', content: `Instruction: "${prompt}".\n\nTranscript:\n${transcript}` }
            ],
            model: 'llama3-8b-8192',
        });
        const summary = chatCompletion.choices[0]?.message?.content;
        res.status(200).json({ summary });
    } catch (error) {
        console.error('Groq API Error:', error);
        res.status(500).json({ error: 'Failed to communicate with AI service.' });
    }
});

// Sharing Endpoint (Updated to use Resend)
app.post('/api/share', async (req, res) => {
    const { summary, recipients } = req.body;
    if (!summary || !recipients) {
        return res.status(400).json({ error: 'Request must contain summary and recipients.' });
    }

    try {
        const { data, error } = await resend.emails.send({
            from: 'AI Summarizer <onboarding@resend.dev>', // Required by Resend's free tier
            to: recipients.split(',').map(email => email.trim()), // Resend prefers an array
            subject: 'Your AI-Generated Meeting Summary',
            html: `
                <div style="font-family: Arial, sans-serif; line-height: 1.6;">
                    <h2 style="color: #2c3e50;">Meeting Summary</h2>
                    <div style="border: 1px solid #e0e0e0; border-radius: 8px; padding: 20px; background-color: #f9f9f9;">
                        ${summary.replace(/\n/g, '<br>')}
                    </div>
                    <p style="font-size: 0.9em; color: #777; margin-top: 20px;">
                        Generated by AI Summarizer Pro.
                    </p>
                </div>
            `,
        });

        if (error) {
            console.error('Resend API Error:', error);
            return res.status(400).json({ error: 'Failed to send email via Resend.' });
        }

        res.status(200).json({ message: 'Summary sent successfully!' });
    } catch (error) {
        console.error('Server Error during email sending:', error);
        res.status(500).json({ error: 'An internal server error occurred.' });
    }
});

// Start Server
app.listen(PORT, () => {
    console.log(`Backend engine is running perfectly on port ${PORT}`);
});